#!/bin/bash
#$1 = <dev>

# Directory to use for mounting the devices
mdir=/media
# Default options to use for mounting
mopts='errors=remount-ro,relatime,utf8,user'

[[ $EUID != 0 ]] && {
    echo "This tool requires root permissions"
    exit 1
}
shopt -s nullglob

log() {
    echo "$@" >> /var/log/media-automount.log
    >&2 echo "$@"
}

if ! [ "$1" ]
then
    log "missing arguments! a device name must be provided"
    exit 1
else
    dev=/dev/${1##*/}
    # Check if it's actually a device partition
    if [[ -n "$(blkid $dev | grep PTTYPE)" ]]; then
        log "$dev is not a device partition"
        exit 1
    fi
fi

# Check if the device exists, if not but mounted, umount it
if ! [ -b $dev ]
then
    if grep /etc/mtab -qe "^$dev"
    then
        log "$dev device removed, umounting and cleaning /media"
        # Check and close processes with this mount point
        # TODO: Handle multiple mount points
        mount_point="$(grep "$dev" /etc/mtab | awk '{print $2}')"
        fuser -k "${mount_point}"
        if umount "${mount_point}"; then
            exitcode=0
        else
            log "Error umounting $dev errcode:$?"
            exitcode=$?
        fi
    else
        log "device doesn't exist anymore or is not a block device: $dev"
        exitcode=1
    fi

    # cleanup
    for dir in "$mdir"/*
    do
        [ -d "$dir" ] && ! mountpoint -q "$dir" && rmdir "$dir"
    done
    exit $exitcode
fi

# Load additional info for the block device
eval $(blkid -po export $dev)

# Check /etc/fstab for an entry corresponding to the device
[ "$UUID" ] && fstab=$(grep /etc/fstab -e "${UUID/\-/\\\-}") || \
[ "$LABEL" ] && fstab=$(grep /etc/fstab -e "${LABEL/\-/\\\-}") || \
fstab=$(grep /etc/fstab -e "^[ \t]*$dev[ \t]")

# Don't manage devices that are already in fstab
if [ "$fstab" ]
then
    log "$dev already in /etc/fstab, automount won't manage it: ${fstab/[ \t][ \t]/ }"
    exit 1
fi

# directory name
dev_name=${LABEL:-${PART_ENTRY_NAME:-${dev##*/}}}
name="${dev_name}"
count=0
while [ -e "${mdir}/${name}" ]; do name="${dev_name} $(( ++count ))"; done
dir="${mdir}/${name}"

case $TYPE in
    vfat)
        mopts="$mopts,flush,gid=100,dmask=000,fmask=111"
        ;;
    ntfs)
        mopts="$mopts,flush"
        hash ntfs-3g && mtype="ntfs-3g"
        ;;
    *)
        mopts="$mopts,sync"
        ;;
esac

    rmdir "$dir"
log "mounting device $dev in $dir"
mkdir -p "$dir"
if mount -t "${mtype:-auto}" -o "$mopts" "$dev" "$dir"
then
    # Notify
    username="$(ps au | awk '$11 ~ /^xinit/ { print $1; exit }')"
    ppid=$(ps -o ppid= -p  $$)
    if [[ -n "$username" ]]; then
        export DISPLAY="$(ps e -u "$username" | grep -m1 DISPLAY | sed -rn 's/.* DISPLAY=(:[0-9]*).*/\1/p')"
        # The process below can easily be broken
        export XAUTHORITY="$(ps e -u "$username" | grep -m1 XAUTHORITY  | sed -rn 's/.* XAUTHORITY=([^=]*) [A-Za-z_]*=.*/\1/p')"
        export FILE="$(ps e -u "$username" | grep -m1 FILE  | sed -rn 's/.* FILE=([^=]*) [A-Za-z_]*=.*/\1/p')"
        command -v notify-send && runuser -u "$username" notify-send "Media Automount" "New device mounted at $dir"
        if [[ -n "$FILE"  ]]; then
            nohup su - "$username" -c "XAUTHORITY='${XAUTHORITY}' DISPLAY='${DISPLAY}' st $FILE '$dir'" &
        else
            nohup command -v xdg-open && runuser -u "$username" xdg-open "$dir" &
        fi
    fi
    log "Device successfully mounted: $dir"
    kill -9 $ppid
    exit 0
else
    log "Mount error: $?"
    exit 1
fi
